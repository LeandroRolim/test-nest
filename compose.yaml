version: '3.8'

services:
  # Serviço da API NestJS
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: dependencies # Usar o stage de dependências para desenvolvimento para hot-reloading
    container_name: thera_api
    env_file:
      - .env # Carrega variáveis de ambiente do arquivo .env
    environment:
      # Sobrescrever DATABASE_URL para usar o serviço 'db' do Docker Compose
      DATABASE_URL: ${DATABASE_URL_DOCKER:-postgresql://user:password@db:5432/thera_db?schema=public}
      PORT: ${PORT:-3000}
    volumes:
      - .:/usr/src/app # Monta o código local no container para hot-reloading
      - /usr/src/app/node_modules # Evita que node_modules local sobrescreva o do container
    ports:
      - "${PORT:-3000}:${PORT:-3000}" # Mapeia a porta da aplicação
    depends_on:
      db: # Garante que o serviço 'db' inicie antes da API
        condition: service_healthy # Espera o banco estar saudável
    # Comando para desenvolvimento com hot-reloading
    command: yarn start:dev

  # Serviço do Banco de Dados PostgreSQL
  db:
    image: postgres:14-alpine
    container_name: thera_postgres_db
    environment:
      POSTGRES_USER: ${DB_USER:-user} # Use variáveis do .env ou defina defaults
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-thera_db}
    ports:
      - "${DB_PORT_HOST:-5433}:5432" # Mapeia a porta do DB para o host (ex: 5433 no host -> 5432 no container)
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persiste os dados do banco
    healthcheck: # Verifica se o banco está pronto para aceitar conexões
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user} -d ${DB_NAME:-thera_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: # Volume nomeado para persistência dos dados do PostgreSQL
